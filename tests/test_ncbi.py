import json
from unittest import TestCase

from kilombo.model.study_hierarchy import StudyHierarchy
from kilombo.service.external.ncbi import _extract_gse_from_summaries
from kilombo.service.external.ncbi import _extract_srp_from_summaries
from kilombo.service.external.ncbi import link_study_and_accessions


class Test(TestCase):
    def test__extract_gses_from_summaries_short_study_summaries(self):
        with open("./fixtures/6_study_summaries.json") as file:
            study_summaries = json.load(file)
        gses = []
        for study_summary in study_summaries:
            gses.append(_extract_gse_from_summaries(study_summaries[study_summary]))
        assert len(gses) == 6
        assert gses == ["GSE207275", "GSE189432", "GSE167593", "GSE174574", "GSE126815", "GSE150644"]

    def test__extract_gses_from_summaries_long_study_summaries(self):
        with open("./fixtures/202_study_summaries.json") as file:
            study_summaries = json.load(file)
        gses = []
        for study_summary in study_summaries:
            gse = _extract_gse_from_summaries(study_summaries[study_summary])
            if gse:
                gses.append(gse)
        assert len(gses) == 129
        assert gses == [
            "GSE239626",
            "GSE181952",
            "GSE195874",
            "GSE239874",
            "GSE239873",
            "GSE236464",
            "GSE236805",
            "GSE233951",
            "GSE224377",
            "GSE229375",
            "GSE231833",
            "GSE227954",
            "GSE212147",
            "GSE223137",
            "GSE225410",
            "GSE204769",
            "GSE204755",
            "GSE210776",
            "GSE180761",
            "GSE180760",
            "GSE180755",
            "GSE225254",
            "GSE144830",
            "GSE217431",
            "GSE221042",
            "GSE216028",
            "GSE216027",
            "GSE216026",
            "GSE161196",
            "GSE84424",
            "GSE163338",
            "GSE215819",
            "GSE215818",
            "GSE215817",
            "GSE207601",
            "GSE156742",
            "GSE209656",
            "GSE211739",
            "GSE210147",
            "GSE205291",
            "GSE203046",
            "GSE201391",
            "GSE201390",
            "GSE193770",
            "GSE168527",
            "GSE190289",
            "GSE184098",
            "GSE193240",
            "GSE193238",
            "GSE193236",
            "GSE173187",
            "GSE173182",
            "GSE173790",
            "GSE173789",
            "GSE188320",
            "GSE188152",
            "GSE188097",
            "GSE188022",
            "GSE187953",
            "GSE187897",
            "GSE187887",
            "GSE187883",
            "GSE187868",
            "GSE187863",
            "GSE187816",
            "GSE187807",
            "GSE187719",
            "GSE187718",
            "GSE187642",
            "GSE187607",
            "GSE187586",
            "GSE187539",
            "GSE187510",
            "GSE187459",
            "GSE187360",
            "GSE187340",
            "GSE187296",
            "GSE187218",
            "GSE187169",
            "GSE187164",
            "GSE187162",
            "GSE187137",
            "GSE186895",
            "GSE174083",
            "GSE177046",
            "GSE169216",
            "GSE166675",
            "GSE178085",
            "GSE141980",
            "GSE168288",
            "GSE172476",
            "GSE172475",
            "GSE130177",
            "GSE169189",
            "GSE161654",
            "GSE139006",
            "GSE159035",
            "GSE159033",
            "GSE163005",
            "GSE142086",
            "GSE142085",
            "GSE156902",
            "GSE133028",
            "GSE134895",
            "GSE146294",
            "GSE145044",
            "GSE129774",
            "GSE129773",
            "GSE143320",
            "GSE144496",
            "GSE138614",
            "GSE125581",
            "GSE128615",
            "GSE121703",
            "GSE130975",
            "GSE127969",
            "GSE122353",
            "GSE104899",
            "GSE104898",
            "GSE104897",
            "GSE110525",
            "GSE114652",
            "GSE113973",
            "GSE84699",
            "GSE94730",
            "GSE91387",
            "GSE79014",
            "GSE77598",
            "GSE66763",
        ]

    def test_get_study_gse_and_srp_if_present(self):
        with open("./fixtures/202_study_summaries.json") as file:
            study_summaries = json.load(file)
        study_hierarchy = StudyHierarchy(pending=study_summaries)
        link_study_and_accessions(study_hierarchy)
        assert len(study_hierarchy.successful) == 60
        assert study_hierarchy.successful == {
            "200066763": ["GSE66763", "SRP056049"],
            "200077598": ["GSE77598", "SRP069333"],
            "200079014": ["GSE79014", "SRP071311"],
            "200084424": ["GSE84424", "SRP078531"],
            "200084699": ["GSE84699", "SRP079236"],
            "200091387": ["GSE91387", "SRP094853"],
            "200094730": ["GSE94730", "SRP099127"],
            "200104897": ["GSE104897", "SRP119856"],
            "200104898": ["GSE104898", "SRP119855"],
            "200110525": ["GSE110525", "SRP132774"],
            "200113973": ["GSE113973", "SRP144462"],
            "200114652": ["GSE114652", "SRP148460"],
            "200121703": ["GSE121703", "SRP166658"],
            "200122353": ["GSE122353", "SRP168313"],
            "200125581": ["GSE125581", "SRP181863"],
            "200127969": ["GSE127969", "SRP180896"],
            "200128615": ["GSE128615", "SRP188970"],
            "200129773": ["GSE129773", "SRP192495"],
            "200129774": ["GSE129774", "SRP192496"],
            "200130177": ["GSE130177", "SRP193448"],
            "200130975": ["GSE130975", "SRP197361"],
            "200133028": ["GSE133028", "SRP201915"],
            "200134895": ["GSE134895", "SRP216410"],
            "200138614": ["GSE138614", "SRP224883"],
            "200139006": ["GSE139006", "SRP226024"],
            "200141980": ["GSE141980", "SRP237508"],
            "200142085": ["GSE142085", "SRP237763"],
            "200143320": ["GSE143320", "SRP299727"],
            "200144496": ["GSE144496", "SRP245908"],
            "200144830": ["GSE144830", "SRP247484"],
            "200145044": ["GSE145044", "SRP247976"],
            "200146294": ["GSE146294", "SRP251583"],
            "200156742": ["GSE156742", "SRP278607"],
            "200156902": ["GSE156902", "SRP278818"],
            "200159035": ["GSE159035", "SRP286403"],
            "200161196": ["GSE161196", "SRP292009"],
            "200161654": ["GSE161654", "SRP292941"],
            "200163005": ["GSE163005", "SRP297575"],
            "200163338": ["GSE163338", "SRP298165"],
            "200166675": ["GSE166675", "SRP306114"],
            "200168288": ["GSE168288", "SRP309366"],
            "200168527": ["GSE168527", "SRP309931"],
            "200169189": ["GSE169189", "SRP311303"],
            "200169216": ["GSE169216", "SRP311342"],
            "200172475": ["GSE172475", "SRP315686"],
            "200172476": ["GSE172476", "SRP315687"],
            "200173182": ["GSE173182", "SRP316022"],
            "200173187": ["GSE173187", "SRP316025"],
            "200173789": ["GSE173789", "SRP318646"],
            "200174083": ["GSE174083", "SRP318929"],
            "200177046": ["GSE177046", "SRP323730"],
            "200178085": ["GSE178085", "SRP323918"],
            "200180755": ["GSE180755", "SRP329681"],
            "200180760": ["GSE180760", "SRP329687"],
            "200180761": ["GSE180761", "SRP329685"],
            "200181952": ["GSE181952", "SRP332229"],
            "200184098": ["GSE184098", "SRP337022"],
            "200186895": ["GSE186895", "SRP343946"],
            "200188320": ["GSE188320", "SRP344813"],
            "200190289": ["GSE190289", "SRP349436"],
        }

    def test__extract_srps_from_summaries_short_study_summaries(self):
        with open("./fixtures/6_study_summaries.json") as file:
            study_summaries = json.load(file)
        srps = []
        for study_summary in study_summaries:
            srps.append(_extract_srp_from_summaries(study_summaries[study_summary]))
        assert len(list(filter(lambda srp: srp, srps))) == 5
        assert srps == [None, "SRP347471", "SRP308347", "SRP320164", "SRP185522", "SRP261818"]

    def test__extract_srps_from_summaries_long_study_summaries(self):
        with open("./fixtures/202_study_summaries.json") as file:
            study_summaries = json.load(file)
        srps = []
        for study_summary in study_summaries:
            srps.append(_extract_srp_from_summaries(study_summaries[study_summary]))
        assert len(list(filter(lambda srp: srp, srps))) == 60
        assert srps == [
            None,
            "SRP332229",
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            "SRP329685",
            "SRP329687",
            "SRP329681",
            None,
            "SRP247484",
            None,
            None,
            None,
            None,
            None,
            "SRP292009",
            "SRP078531",
            "SRP298165",
            None,
            None,
            None,
            None,
            "SRP278607",
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            "SRP309931",
            "SRP349436",
            "SRP337022",
            None,
            None,
            None,
            "SRP316025",
            "SRP316022",
            None,
            "SRP318646",
            "SRP344813",
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            "SRP343946",
            "SRP318929",
            "SRP323730",
            "SRP311342",
            "SRP306114",
            "SRP323918",
            "SRP237508",
            "SRP309366",
            "SRP315687",
            "SRP315686",
            "SRP193448",
            "SRP311303",
            "SRP292941",
            "SRP226024",
            "SRP286403",
            None,
            "SRP297575",
            None,
            "SRP237763",
            "SRP278818",
            "SRP201915",
            "SRP216410",
            "SRP251583",
            "SRP247976",
            "SRP192496",
            "SRP192495",
            "SRP299727",
            "SRP245908",
            "SRP224883",
            "SRP181863",
            "SRP188970",
            "SRP166658",
            "SRP197361",
            "SRP180896",
            "SRP168313",
            None,
            "SRP119855",
            "SRP119856",
            "SRP132774",
            "SRP148460",
            "SRP144462",
            "SRP079236",
            "SRP099127",
            "SRP094853",
            "SRP071311",
            "SRP069333",
            "SRP056049",
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ]
