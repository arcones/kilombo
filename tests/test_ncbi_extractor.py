import json

from kilombo.model.study_hierarchy import StudyHierarchy
from kilombo.service.external.ncbi.ncbi_extractor import NCBIExtractor


def test_extract_gses_from_summaries_long_study_summaries():
    with open("fixtures/ncbi_extractor/132_study_summaries.json") as file:
        study_summaries = json.load(file)
    gses = []
    study_hierarchy = StudyHierarchy(study_summaries)
    for study_summary in study_summaries:
        ncbi_extractor = NCBIExtractor(study_summary, study_hierarchy)
        gse = ncbi_extractor.extract_gse_from_summaries()
        if gse:
            gses.append(gse)
    assert len(gses) == 132
    assert gses == [
        "GSE239455",
        "GSE220951",
        "GSE220950",
        "GSE239626",
        "GSE181952",
        "GSE195874",
        "GSE239874",
        "GSE239873",
        "GSE236464",
        "GSE236805",
        "GSE233951",
        "GSE224377",
        "GSE229375",
        "GSE231833",
        "GSE227954",
        "GSE212147",
        "GSE223137",
        "GSE225410",
        "GSE204769",
        "GSE204755",
        "GSE210776",
        "GSE180761",
        "GSE180760",
        "GSE180755",
        "GSE225254",
        "GSE144830",
        "GSE217431",
        "GSE221042",
        "GSE216028",
        "GSE216027",
        "GSE216026",
        "GSE161196",
        "GSE84424",
        "GSE163338",
        "GSE215819",
        "GSE215818",
        "GSE215817",
        "GSE207601",
        "GSE156742",
        "GSE209656",
        "GSE211739",
        "GSE210147",
        "GSE205291",
        "GSE203046",
        "GSE201391",
        "GSE201390",
        "GSE193770",
        "GSE168527",
        "GSE190289",
        "GSE184098",
        "GSE193240",
        "GSE193238",
        "GSE193236",
        "GSE173187",
        "GSE173182",
        "GSE173790",
        "GSE173789",
        "GSE188320",
        "GSE188152",
        "GSE188097",
        "GSE188022",
        "GSE187953",
        "GSE187897",
        "GSE187887",
        "GSE187883",
        "GSE187868",
        "GSE187863",
        "GSE187816",
        "GSE187807",
        "GSE187719",
        "GSE187718",
        "GSE187642",
        "GSE187607",
        "GSE187586",
        "GSE187539",
        "GSE187510",
        "GSE187459",
        "GSE187360",
        "GSE187340",
        "GSE187296",
        "GSE187218",
        "GSE187169",
        "GSE187164",
        "GSE187162",
        "GSE187137",
        "GSE186895",
        "GSE174083",
        "GSE177046",
        "GSE169216",
        "GSE166675",
        "GSE178085",
        "GSE141980",
        "GSE168288",
        "GSE172476",
        "GSE172475",
        "GSE130177",
        "GSE169189",
        "GSE161654",
        "GSE139006",
        "GSE159035",
        "GSE159033",
        "GSE163005",
        "GSE142086",
        "GSE142085",
        "GSE156902",
        "GSE133028",
        "GSE134895",
        "GSE146294",
        "GSE145044",
        "GSE129774",
        "GSE129773",
        "GSE143320",
        "GSE144496",
        "GSE138614",
        "GSE125581",
        "GSE128615",
        "GSE121703",
        "GSE130975",
        "GSE127969",
        "GSE122353",
        "GSE104899",
        "GSE104898",
        "GSE104897",
        "GSE110525",
        "GSE114652",
        "GSE113973",
        "GSE84699",
        "GSE94730",
        "GSE91387",
        "GSE79014",
        "GSE77598",
        "GSE66763",
    ]


def test_extract_gses_from_summaries_short_study_summaries():
    with open("fixtures/ncbi_extractor/7_study_summaries.json") as file:
        study_summaries = json.load(file)
    gses = []
    study_hierarchy = StudyHierarchy(study_summaries)
    for study_summary in study_summaries:
        ncbi_extractor = NCBIExtractor(study_summary, study_hierarchy)
        gses.append(ncbi_extractor.extract_gse_from_summaries())
    gses.sort()
    assert len(gses) == 7
    assert gses == ["GSE126815", "GSE150644", "GSE167593", "GSE174574", "GSE189432", "GSE207275", "GSE247102"]


def test_extract_srps_from_summaries_short_study_summaries():
    with open("fixtures/ncbi_extractor/7_study_summaries.json") as file:
        study_summaries = json.load(file)
    srps = []
    study_hierarchy = StudyHierarchy(study_summaries)
    for study_summary in study_summaries:
        ncbi_extractor = NCBIExtractor(study_summary, study_hierarchy)
        srps.append(ncbi_extractor.extract_srp_from_summaries())
    assert len(list(filter(lambda srp: srp, srps))) == 5
    assert srps == [None, None, "SRP347471", "SRP308347", "SRP320164", "SRP185522", "SRP261818"]


def test_extract_srps_from_summaries_long_study_summaries():
    with open("fixtures/ncbi_extractor/132_study_summaries.json") as file:
        study_summaries = json.load(file)
    srps = []
    study_hierarchy = StudyHierarchy(study_summaries)
    for study_summary in study_summaries:
        ncbi_extractor = NCBIExtractor(study_summary, study_hierarchy)
        srps.append(ncbi_extractor.extract_srp_from_summaries())
    assert len(list(filter(lambda srp: srp, srps))) == 60
    assert srps == [
        None,
        None,
        None,
        None,
        "SRP332229",
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        "SRP329685",
        "SRP329687",
        "SRP329681",
        None,
        "SRP247484",
        None,
        None,
        None,
        None,
        None,
        "SRP292009",
        "SRP078531",
        "SRP298165",
        None,
        None,
        None,
        None,
        "SRP278607",
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        "SRP309931",
        "SRP349436",
        "SRP337022",
        None,
        None,
        None,
        "SRP316025",
        "SRP316022",
        None,
        "SRP318646",
        "SRP344813",
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        "SRP343946",
        "SRP318929",
        "SRP323730",
        "SRP311342",
        "SRP306114",
        "SRP323918",
        "SRP237508",
        "SRP309366",
        "SRP315687",
        "SRP315686",
        "SRP193448",
        "SRP311303",
        "SRP292941",
        "SRP226024",
        "SRP286403",
        None,
        "SRP297575",
        None,
        "SRP237763",
        "SRP278818",
        "SRP201915",
        "SRP216410",
        "SRP251583",
        "SRP247976",
        "SRP192496",
        "SRP192495",
        "SRP299727",
        "SRP245908",
        "SRP224883",
        "SRP181863",
        "SRP188970",
        "SRP166658",
        "SRP197361",
        "SRP180896",
        "SRP168313",
        None,
        "SRP119855",
        "SRP119856",
        "SRP132774",
        "SRP148460",
        "SRP144462",
        "SRP079236",
        "SRP099127",
        "SRP094853",
        "SRP071311",
        "SRP069333",
        "SRP056049",
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ]
